{"ast":null,"code":"import { API_KEY } from \".\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const fetchForecast = createAsyncThunk('ForecastWReducer/fetchForecast', location => {\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=${API_KEY}`).then(data => data.json()).then(data => data.list).catch(err => console.log(err));\n});\nconst weatherForecast = createSlice({\n  name: 'forecast',\n  initialState: {\n    loading: false,\n    forecast: []\n  },\n  extraReducers: {\n    [fetchForecast.pending]: state => {\n      state.loading = true;\n    },\n    [fetchForecast.rejected]: state => {\n      state.loading = false;\n    },\n    [fetchForecast.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.forecast = [...action.payload];\n    }\n  }\n});\nexport default weatherForecast.reducer;","map":{"version":3,"names":["API_KEY","createSlice","createAsyncThunk","fetchForecast","location","fetch","then","data","json","list","catch","err","console","log","weatherForecast","name","initialState","loading","forecast","extraReducers","pending","state","rejected","fulfilled","action","payload","reducer"],"sources":["C:/Users/yurii/OneDrive/Pulpit/weather-app/src/ForecastWReducer.js"],"sourcesContent":["import { API_KEY } from \".\";\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const fetchForecast = createAsyncThunk('ForecastWReducer/fetchForecast', (location) => {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&appid=${API_KEY}`)\r\n            .then(data => data.json())\r\n            .then(data => data.list)\r\n            .catch(err => console.log(err))\r\n})\r\n\r\nconst weatherForecast = createSlice({\r\n    name: 'forecast',\r\n    initialState: {\r\n        loading: false,\r\n        forecast: [],\r\n    },\r\n    extraReducers: {\r\n        [fetchForecast.pending] : (state) => {\r\n            state.loading = true\r\n        },\r\n        [fetchForecast.rejected]: (state) => {\r\n            state.loading = false\r\n        },\r\n        [fetchForecast.fulfilled]: (state, action) => {\r\n            state.loading = false\r\n            state.forecast = [...action.payload]\r\n        }\r\n    }\r\n})\r\n\r\nexport default weatherForecast.reducer\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,GAAG;AAC3B,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAAC,gCAAgC,EAAGE,QAAQ,IAAK;EAC1F,OAAOC,KAAK,CAAE,sDAAqDD,QAAS,uBAAsBJ,OAAQ,EAAC,CAAC,CACnGM,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACE,IAAI,CAAC,CACvBC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAMG,eAAe,GAAGb,WAAW,CAAC;EAChCc,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACVC,OAAO,EAAE,KAAK;IACdC,QAAQ,EAAE;EACd,CAAC;EACDC,aAAa,EAAE;IACX,CAAChB,aAAa,CAACiB,OAAO,GAAKC,KAAK,IAAK;MACjCA,KAAK,CAACJ,OAAO,GAAG,IAAI;IACxB,CAAC;IACD,CAACd,aAAa,CAACmB,QAAQ,GAAID,KAAK,IAAK;MACjCA,KAAK,CAACJ,OAAO,GAAG,KAAK;IACzB,CAAC;IACD,CAACd,aAAa,CAACoB,SAAS,GAAG,CAACF,KAAK,EAAEG,MAAM,KAAK;MAC1CH,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACH,QAAQ,GAAG,CAAC,GAAGM,MAAM,CAACC,OAAO,CAAC;IACxC;EACJ;AACJ,CAAC,CAAC;AAEF,eAAeX,eAAe,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}