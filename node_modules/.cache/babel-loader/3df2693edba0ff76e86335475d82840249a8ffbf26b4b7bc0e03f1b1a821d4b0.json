{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yurii\\\\OneDrive\\\\Pulpit\\\\weather-app\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport NavBlock from './NavBlock';\nimport CurrentWeather from './CurrentWeather';\nimport clouds from './img/cloud.png';\nimport rain from './img/rain.png';\nimport clear from './img/sun.png';\nimport mist from './img/mist.png';\nimport snow from './img/snow.png';\nimport ForecastWeather from './ForecastWeather';\nimport Highlights from './Highlights';\nimport HourlyWeather from './HourlyWeather';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'a43370d07c332057a138f54300a5a38a';\nconst images = {\n  'Clouds': clouds,\n  'Haze': mist,\n  'Mist': mist,\n  'Clear': clear,\n  'Rain': rain,\n  'Snow': snow\n};\nexport default function App() {\n  _s();\n  const [location, setLocation] = useState('');\n  const [temp, setTemp] = useState(0);\n  const [windDeg, setWinDeg] = useState(0);\n  const [windSpeed, setSpeed] = useState(0);\n  const [weatherName, setWeatherName] = useState('');\n  const [weather, setWeather] = useState('');\n  const [pressure, setPressure] = useState(0);\n  const [humidity, setHumidity] = useState(0);\n  const [visibility, setVisibility] = useState(0);\n  const [feelsLike, setFeelsLike] = useState(0);\n  const [sunrise, setSunrise] = useState('');\n  const [sunset, setSunset] = useState('');\n  const [nexDays, setDays] = useState([]);\n  const [nextWeather, setNextWeather] = useState([]);\n  const [nextTemp, setNextTemp] = useState([]);\n  const items = [];\n  if (location !== '') {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${API_KEY}`).then(data => data.json()).then(data => {\n      let timezone = data.timezone;\n      setTemp(Math.floor(data.main.temp));\n      setWeatherName(data.weather[0].description);\n      setWeather(data.weather[0].main);\n      setSpeed(data.wind.speed);\n      setWinDeg(data.wind.deg);\n      setHumidity(data.main.humidity);\n      setVisibility(data.visibility / 1000);\n      setPressure(data.main.pressure);\n      setFeelsLike(data.main.feels_like);\n      setSunrise(moment.utc(data.sys.sunrise, 'X').add(timezone, 'seconds').format('HH:mm a'));\n      setSunset(moment.utc(data.sys.sunset, 'X').add(timezone, 'seconds').format('HH:mm a'));\n    }).catch(() => console.log('404'));\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&cnt=9&appid=${API_KEY}`).then(data => data.json()).then(data => {\n      console.log(data.list[0]);\n      for (let i = 0; i < data.list.length; i++) {\n        let item = {\n          temp: data.list[i].main.temp,\n          weather: data.list[0].weather[i].main,\n          date: data.list[0].dt_txt\n        };\n        items.push(item);\n      }\n      console.log(items);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(NavBlock, {\n        setLocation: setLocation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n          location: location,\n          temp: temp,\n          weather: images[weather],\n          weatherName: weatherName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForecastWeather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Highlights, {\n          sunrise: sunrise,\n          sunset: sunset,\n          speed: windSpeed,\n          deg: windDeg,\n          humidity: humidity,\n          pressure: pressure,\n          visibility: visibility,\n          feelsLike: feelsLike\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HourlyWeather, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3v2AzntAZiT61WZlmMJqAdZjQt8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","NavBlock","CurrentWeather","clouds","rain","clear","mist","snow","ForecastWeather","Highlights","HourlyWeather","moment","jsxDEV","_jsxDEV","API_KEY","images","App","_s","location","setLocation","temp","setTemp","windDeg","setWinDeg","windSpeed","setSpeed","weatherName","setWeatherName","weather","setWeather","pressure","setPressure","humidity","setHumidity","visibility","setVisibility","feelsLike","setFeelsLike","sunrise","setSunrise","sunset","setSunset","nexDays","setDays","nextWeather","setNextWeather","nextTemp","setNextTemp","items","fetch","then","data","json","timezone","Math","floor","main","description","wind","speed","deg","feels_like","utc","sys","add","format","catch","console","log","list","i","length","item","date","dt_txt","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yurii/OneDrive/Pulpit/weather-app/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport NavBlock from './NavBlock'\nimport CurrentWeather from './CurrentWeather'\nimport clouds from './img/cloud.png'\nimport rain from './img/rain.png'\nimport clear from './img/sun.png'\nimport mist from './img/mist.png'\nimport snow from './img/snow.png'\nimport ForecastWeather from './ForecastWeather'\nimport Highlights from './Highlights'\nimport HourlyWeather from './HourlyWeather'\nimport moment from 'moment'\n\nconst API_KEY = 'a43370d07c332057a138f54300a5a38a'\nconst images = {\n    'Clouds': clouds,\n    'Haze': mist,\n    'Mist': mist,\n    'Clear': clear,\n    'Rain': rain,\n    'Snow': snow,\n}\n\nexport default function App() {\n  const [location, setLocation] = useState('')\n  const [temp, setTemp] = useState(0)\n  const [windDeg, setWinDeg] = useState(0)\n  const [windSpeed, setSpeed] = useState(0)\n  const [weatherName, setWeatherName] = useState('')\n  const [weather, setWeather] = useState('')\n  const [pressure, setPressure] = useState(0)\n  const [humidity, setHumidity] = useState(0)\n  const [visibility, setVisibility] = useState(0)\n  const [feelsLike, setFeelsLike] = useState(0)\n  const [sunrise, setSunrise] = useState('')\n  const [sunset, setSunset] = useState('')\n  \n  const [nexDays, setDays] = useState([])\n  const [nextWeather, setNextWeather] = useState([])\n  const [nextTemp, setNextTemp] = useState([])\n\n  const items = []\n\n  if(location !== ''){\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${API_KEY}`)\n    .then(data=> data.json())\n    .then(data => {\n      let timezone = data.timezone\n      setTemp(Math.floor(data.main.temp))\n      setWeatherName(data.weather[0].description)\n      setWeather(data.weather[0].main)\n      setSpeed(data.wind.speed)\n      setWinDeg(data.wind.deg)\n      setHumidity(data.main.humidity)\n      setVisibility(data.visibility / 1000)\n      setPressure(data.main.pressure)\n      setFeelsLike(data.main.feels_like)\n      setSunrise(moment.utc(data.sys.sunrise,'X').add(timezone,'seconds').format('HH:mm a'))\n      setSunset(moment.utc(data.sys.sunset,'X').add(timezone,'seconds').format('HH:mm a'))\n    })\n    .catch(() => console.log('404'))\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=metric&cnt=9&appid=${API_KEY}`)\n    .then(data => data.json()).then(data => {\n      console.log(data.list[0])\n      for(let i = 0; i < data.list.length; i++){\n        let item = {\n          temp: data.list[i].main.temp,\n          weather: data.list[0].weather[i].main,\n          date: data.list[0].dt_txt\n        }\n        items.push(item)\n      }\n      console.log(items)\n    })\n  }\n\n  return (\n    <div className='wrapper'>\n      <nav>\n        <NavBlock setLocation={setLocation}/>\n      </nav>\n      <main>\n        <div>\n          <CurrentWeather location={location} temp={temp} weather={images[weather]} weatherName={weatherName}/>\n          <ForecastWeather />\n        </div>\n        <div>\n          <Highlights sunrise={sunrise} sunset={sunset} speed={windSpeed} deg={windDeg} humidity={humidity} pressure={pressure} visibility={visibility} feelsLike={feelsLike}/>\n          <HourlyWeather />\n        </div>\n      </main>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}